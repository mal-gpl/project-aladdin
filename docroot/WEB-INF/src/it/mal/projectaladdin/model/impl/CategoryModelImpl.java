/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.mal.projectaladdin.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.mal.projectaladdin.model.Category;
import it.mal.projectaladdin.model.CategoryModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the Category service. Represents a row in the &quot;ALD_Category&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.mal.projectaladdin.model.CategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoryImpl}.
 * </p>
 *
 * @author MAL
 * @see CategoryImpl
 * @see it.mal.projectaladdin.model.Category
 * @see it.mal.projectaladdin.model.CategoryModel
 * @generated
 */
public class CategoryModelImpl extends BaseModelImpl<Category>
	implements CategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a category model instance should use the {@link it.mal.projectaladdin.model.Category} interface instead.
	 */
	public static final String TABLE_NAME = "ALD_Category";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "author", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "parentCategory", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ALD_Category (categoryId LONG not null primary key,name VARCHAR(75) null,author LONG,description VARCHAR(75) null,parentCategory LONG)";
	public static final String TABLE_SQL_DROP = "drop table ALD_Category";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.mal.projectaladdin.model.Category"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.mal.projectaladdin.model.Category"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.mal.projectaladdin.model.Category"),
			true);
	public static long AUTHOR_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;
	public static long PARENTCATEGORY_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.mal.projectaladdin.model.Category"));

	public CategoryModelImpl() {
	}

	public long getPrimaryKey() {
		return _categoryId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCategoryId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_categoryId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Category.class;
	}

	public String getModelClassName() {
		return Category.class.getName();
	}

	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public long getAuthor() {
		return _author;
	}

	public void setAuthor(long author) {
		_columnBitmask |= AUTHOR_COLUMN_BITMASK;

		if (!_setOriginalAuthor) {
			_setOriginalAuthor = true;

			_originalAuthor = _author;
		}

		_author = author;
	}

	public long getOriginalAuthor() {
		return _originalAuthor;
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public long getParentCategory() {
		return _parentCategory;
	}

	public void setParentCategory(long parentCategory) {
		_columnBitmask |= PARENTCATEGORY_COLUMN_BITMASK;

		if (!_setOriginalParentCategory) {
			_setOriginalParentCategory = true;

			_originalParentCategory = _parentCategory;
		}

		_parentCategory = parentCategory;
	}

	public long getOriginalParentCategory() {
		return _originalParentCategory;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Category toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Category)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Category.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		CategoryImpl categoryImpl = new CategoryImpl();

		categoryImpl.setCategoryId(getCategoryId());
		categoryImpl.setName(getName());
		categoryImpl.setAuthor(getAuthor());
		categoryImpl.setDescription(getDescription());
		categoryImpl.setParentCategory(getParentCategory());

		categoryImpl.resetOriginalValues();

		return categoryImpl;
	}

	public int compareTo(Category category) {
		long primaryKey = category.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Category category = null;

		try {
			category = (Category)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = category.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CategoryModelImpl categoryModelImpl = this;

		categoryModelImpl._originalName = categoryModelImpl._name;

		categoryModelImpl._originalAuthor = categoryModelImpl._author;

		categoryModelImpl._setOriginalAuthor = false;

		categoryModelImpl._originalParentCategory = categoryModelImpl._parentCategory;

		categoryModelImpl._setOriginalParentCategory = false;

		categoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Category> toCacheModel() {
		CategoryCacheModel categoryCacheModel = new CategoryCacheModel();

		categoryCacheModel.categoryId = getCategoryId();

		categoryCacheModel.name = getName();

		String name = categoryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			categoryCacheModel.name = null;
		}

		categoryCacheModel.author = getAuthor();

		categoryCacheModel.description = getDescription();

		String description = categoryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			categoryCacheModel.description = null;
		}

		categoryCacheModel.parentCategory = getParentCategory();

		return categoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{categoryId=");
		sb.append(getCategoryId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", parentCategory=");
		sb.append(getParentCategory());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("it.mal.projectaladdin.model.Category");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentCategory</column-name><column-value><![CDATA[");
		sb.append(getParentCategory());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Category.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Category.class
		};
	private long _categoryId;
	private String _name;
	private String _originalName;
	private long _author;
	private long _originalAuthor;
	private boolean _setOriginalAuthor;
	private String _description;
	private long _parentCategory;
	private long _originalParentCategory;
	private boolean _setOriginalParentCategory;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private Category _escapedModelProxy;
}